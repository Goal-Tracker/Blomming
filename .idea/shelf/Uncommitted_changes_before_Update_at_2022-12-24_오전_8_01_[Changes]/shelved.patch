Index: app/src/main/java/com/example/goaltracker/FriendActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.goaltracker\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.android.synthetic.main.activity_add_friend.backBtn\r\nimport kotlinx.android.synthetic.main.activity_friend.*\r\n\r\n\r\nclass FriendActivity : AppCompatActivity() {\r\n    // 파이어스토어\r\n    var firestore: FirebaseFirestore? = null\r\n    private val currentUser = Firebase.auth.currentUser?.uid\r\n\r\n    var searchcount = 0 //사람 수\r\n    private lateinit var adapter: FriendAdapter\r\n    private lateinit var accept_adapter: FriendAcceptAdapter\r\n    private lateinit var request_adapter: FriendRequestAdapter\r\n\r\n    private val friend = mutableListOf<Friend>()\r\n    private val friend_accept = mutableListOf<Friend>()\r\n    private val friend_request = mutableListOf<Friend>()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(MySharedPreferences.getTheme(this))\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_friend)\r\n\r\n        // 파이어스토어 인스턴스 초기화\r\n        firestore = FirebaseFirestore.getInstance()\r\n\r\n        //친구 목록\r\n        adapter = FriendAdapter(friend)\r\n        FriendRecyclerView.adapter = adapter\r\n        FriendRecyclerView.layoutManager = LinearLayoutManager(this)\r\n        FriendRecyclerView.setHasFixedSize(true)\r\n\r\n        //친구 신청 수락\r\n        accept_adapter = FriendAcceptAdapter(friend_accept)\r\n        FriendAcceptRecyclerView.adapter = accept_adapter\r\n        FriendAcceptRecyclerView.layoutManager =\r\n            LinearLayoutManager(this).also { it.orientation = LinearLayoutManager.HORIZONTAL } //리사이클러뷰 가로로\r\n        FriendAcceptRecyclerView.setHasFixedSize(true)\r\n\r\n        //친구 신청 취소\r\n        request_adapter = FriendRequestAdapter(friend_request)\r\n        FriendRequestRecyclerView.adapter = request_adapter\r\n        FriendRequestRecyclerView.layoutManager =\r\n            LinearLayoutManager(this).also { it.orientation = LinearLayoutManager.HORIZONTAL } //리사이클러뷰 가로로\r\n        FriendRequestRecyclerView.setHasFixedSize(true)\r\n\r\n\r\n\r\n        //x버튼 누르면 main 화면으로 이동\r\n        backBtn.setOnClickListener {\r\n            startActivity(Intent(this, MainActivity::class.java))\r\n        }\r\n\r\n\r\n        //돋보기 버튼 누르면 친구추가 화면으로 이동\r\n        searchBtn.setOnClickListener {\r\n            startActivity(Intent(this, AddFriendActivity::class.java))\r\n        }\r\n\r\n        //입력칸 누르면 친구추가 화면으로 이동\r\n        search.setOnClickListener {\r\n            startActivity(Intent(this, AddFriendActivity::class.java))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //친구 수\r\n    fun getCount() {\r\n        var text_count = findViewById<TextView>(R.id.search_friendcount)\r\n        text_count.text = \"\" + searchcount + \"명\"\r\n    }\r\n\r\n    //친구 신청받은 수\r\n    fun getAcCount() {\r\n        var text_count = findViewById<TextView>(R.id.accept_friendcount)\r\n        text_count.text = \"\" + searchcount + \"명\"\r\n    }\r\n\r\n    //친구 신청보낸 수\r\n    fun getReCount() {\r\n        var text_count = findViewById<TextView>(R.id.request_friendcount)\r\n        text_count.text = \"\" + searchcount + \"명\"\r\n    }\r\n\r\n    //친구 신청 수락\r\n    inner class FriendAcceptAdapter(private val context: MutableList<Friend>) :\r\n        RecyclerView.Adapter<FriendAcceptAdapter.ViewHolder>() {\r\n        private var friend_accept = mutableListOf<Friend>()\r\n\r\n        //status가 accept인 것만 불러오기\r\n        init {\r\n            firestore?.collection(\"Account\")?.document(\"$currentUser\")\r\n                ?.collection(\"Friend\")\r\n                ?.whereEqualTo(\"status\", \"accept\")\r\n                ?.addSnapshotListener { querySnapshot, firebaseFirestoreException ->\r\n                    // ArrayList 비워줌\r\n                    friend_accept.clear()\r\n\r\n                    for (snapshot in querySnapshot!!.documents) {\r\n                        var item = snapshot.toObject(Friend::class.java)\r\n                        friend_accept.add(item!!)\r\n                    }\r\n                    searchcount = friend_accept.size\r\n                    getAcCount()\r\n                    accept_adapter.notifyDataSetChanged()\r\n                }\r\n        }\r\n\r\n        // xml파일을 inflate하여 ViewHolder를 생성\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            var view =\r\n                LayoutInflater.from(parent.context)\r\n                    .inflate(R.layout.item_accept_friend, parent, false)\r\n            return ViewHolder(view)\r\n        }\r\n\r\n        // onCreateViewHolder에서 만든 view와 실제 데이터를 연결\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            var viewHolder = (holder as ViewHolder).itemView\r\n            holder.setFriendAcceptName(friend_accept[position])\r\n            holder.SetFriendAcceptColor(friend_accept[position])\r\n            holder.AcceptBtnOnclick(friend_accept[position])\r\n\r\n\r\n        }\r\n\r\n        inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\r\n\r\n            private val AcceptName: TextView = itemView.findViewById(R.id.AcceptName)\r\n            private val AcceptColor: ImageView = itemView.findViewById(R.id.AcceptColor)\r\n            private val AcceptBtn: Button = itemView.findViewById(R.id.AcceptBtn)\r\n\r\n            //친구 이름\r\n            fun setFriendAcceptName(item: Friend) {\r\n                AcceptName.text = item.userName?.get(0).toString()\r\n            }\r\n\r\n            //친구 프로필\r\n            fun SetFriendAcceptColor(item: Friend) {\r\n                var circleResource = 0\r\n                when (item.userColor) {\r\n                    \"#f69b94\" -> circleResource = R.drawable.b_f69b94\r\n                    \"#f8c8c4\" -> circleResource = R.drawable.b_f8c8c4\r\n                    \"#fcdcce\" -> circleResource = R.drawable.b_fcdcce\r\n                    \"#96b0e5\" -> circleResource = R.drawable.b_96b0e5\r\n                    \"#92b9e2\" -> circleResource = R.drawable.b_92b9e2\r\n                    \"#ebc0c7\" -> circleResource = R.drawable.b_ebc0c7\r\n                    \"#7bb6c8\" -> circleResource = R.drawable.b_7bb6c8\r\n                    \"#aad3d7\" -> circleResource = R.drawable.b_aad3d7\r\n                    \"#f5f1f0\" -> circleResource = R.drawable.b_f5f1f0\r\n                    \"#d5e3e6\" -> circleResource = R.drawable.b_d5e3e6\r\n                    \"#f2a4b1\" -> circleResource = R.drawable.b_f2a4b1\r\n                    \"#7175a5\" -> circleResource = R.drawable.b_7175a5\r\n                    \"#a1b3d7\" -> circleResource = R.drawable.b_a1b3d7\r\n                    \"#bd83cf\" -> circleResource = R.drawable.b_bd83cf\r\n                    \"#e5afe9\" -> circleResource = R.drawable.b_e5afe9\r\n\r\n                }\r\n                AcceptColor.setImageResource(circleResource)\r\n            }\r\n\r\n            //친구 수락 버튼\r\n            fun AcceptBtnOnclick(item: Friend) {\r\n                AcceptBtn.setOnClickListener {\r\n                    // 내 친구 목록\r\n                    firestore?.collection(\"Account\")?.document(\"$currentUser\")\r\n                        ?.collection(\"Friend\")\r\n                        ?.document(\"${item.uid}\")\r\n                        ?.update(\"status\", \"friend\")\r\n                        ?.addOnSuccessListener { }\r\n                        ?.addOnFailureListener { }\r\n\r\n                    // 상대방 친구 목록\r\n                    firestore?.collection(\"Account\")?.document(item.uid.toString())\r\n                        ?.collection(\"Friend\")\r\n                        ?.document(\"${currentUser}\")\r\n                        ?.update(\"status\", \"friend\")\r\n                        ?.addOnSuccessListener { }\r\n                        ?.addOnFailureListener { }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // 리사이클러뷰의 아이템 총 개수 반환\r\n        override fun getItemCount() = friend_accept.size\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //친구 신청 취소\r\n    inner class FriendRequestAdapter(private val context: MutableList<Friend>) :\r\n        RecyclerView.Adapter<FriendRequestAdapter.ViewHolder>() {\r\n        private var friend_request = mutableListOf<Friend>()\r\n\r\n        //status가 request인 것만 불러오기\r\n        init {\r\n            firestore?.collection(\"Account\")?.document(\"$currentUser\")\r\n                ?.collection(\"Friend\")\r\n                ?.whereEqualTo(\"status\", \"request\")\r\n                ?.addSnapshotListener { querySnapshot, firebaseFirestoreException ->\r\n\r\n                    // ArrayList 비워줌\r\n                    friend_request.clear()\r\n\r\n                    for (snapshot in querySnapshot!!.documents) {\r\n                        var item = snapshot.toObject(Friend::class.java)\r\n                        friend_request.add(item!!)\r\n                    }\r\n                    searchcount = friend_request.size\r\n                    getReCount()\r\n                    request_adapter.notifyDataSetChanged()\r\n                }\r\n        }\r\n\r\n        // xml파일을 inflate하여 ViewHolder를 생성\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            var view =\r\n                LayoutInflater.from(parent.context)\r\n                    .inflate(R.layout.item_request_friend, parent, false)\r\n            return ViewHolder(view)\r\n        }\r\n\r\n        // onCreateViewHolder에서 만든 view와 실제 데이터를 연결\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            var viewHolder = (holder as ViewHolder).itemView\r\n            holder.setFriendRequestName(friend_request[position])\r\n            holder.SetFriendRequestColor(friend_request[position])\r\n            holder.RequestBtnOnclick(friend_request[position])\r\n\r\n\r\n        }\r\n\r\n\r\n        inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\r\n\r\n            private val RequestName: TextView = itemView.findViewById(R.id.RequestName)\r\n            private val RequestColor: ImageView = itemView.findViewById(R.id.RequestColor)\r\n            private val RequestBtn: Button = itemView.findViewById(R.id.RequestBtn)\r\n\r\n            //친구 이름\r\n            fun setFriendRequestName(item: Friend) {\r\n                RequestName.text = item.userName?.get(0).toString()\r\n            }\r\n\r\n            //친구 프로필\r\n            fun SetFriendRequestColor(item: Friend) {\r\n                var circleResource = 0\r\n                when (item.userColor) {\r\n                    \"#f69b94\" -> circleResource = R.drawable.b_f69b94\r\n                    \"#f8c8c4\" -> circleResource = R.drawable.b_f8c8c4\r\n                    \"#fcdcce\" -> circleResource = R.drawable.b_fcdcce\r\n                    \"#96b0e5\" -> circleResource = R.drawable.b_96b0e5\r\n                    \"#92b9e2\" -> circleResource = R.drawable.b_92b9e2\r\n                    \"#ebc0c7\" -> circleResource = R.drawable.b_ebc0c7\r\n                    \"#7bb6c8\" -> circleResource = R.drawable.b_7bb6c8\r\n                    \"#aad3d7\" -> circleResource = R.drawable.b_aad3d7\r\n                    \"#f5f1f0\" -> circleResource = R.drawable.b_f5f1f0\r\n                    \"#d5e3e6\" -> circleResource = R.drawable.b_d5e3e6\r\n                    \"#f2a4b1\" -> circleResource = R.drawable.b_f2a4b1\r\n                    \"#7175a5\" -> circleResource = R.drawable.b_7175a5\r\n                    \"#a1b3d7\" -> circleResource = R.drawable.b_a1b3d7\r\n                    \"#bd83cf\" -> circleResource = R.drawable.b_bd83cf\r\n                    \"#e5afe9\" -> circleResource = R.drawable.b_e5afe9\r\n\r\n                }\r\n                RequestColor.setImageResource(circleResource)\r\n            }\r\n\r\n            //친구 신청 취소 버튼\r\n            fun RequestBtnOnclick(item: Friend) {\r\n                RequestBtn.setOnClickListener {\r\n                    // 내 친구 목록\r\n                    firestore?.collection(\"Account\")?.document(\"$currentUser\")\r\n                        ?.collection(\"Friend\")\r\n                        ?.document(\"${item.uid}\")\r\n                        ?.delete()\r\n\r\n                    // 상대방 친구 목록\r\n                    firestore?.collection(\"Account\")?.document(item.uid.toString())\r\n                        ?.collection(\"Friend\")\r\n                        ?.document(\"${currentUser}\")\r\n                        ?.delete()\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // 리사이클러뷰의 아이템 총 개수 반환\r\n        override fun getItemCount() = friend_request.size\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //친구 목록\r\n    inner class FriendAdapter(private val context: MutableList<Friend>) :\r\n        RecyclerView.Adapter<FriendAdapter.ViewHolder>() {\r\n        private var friend = mutableListOf<Friend>()\r\n\r\n        //status가 friend인 것만 불러오기\r\n        init {\r\n            firestore?.collection(\"Account\")?.document(\"$currentUser\")\r\n                ?.collection(\"Friend\")\r\n                ?.whereEqualTo(\"status\", \"friend\")\r\n                ?.addSnapshotListener { querySnapshot, firebaseFirestoreException ->\r\n                    // ArrayList 비워줌\r\n                    friend.clear()\r\n\r\n                    for (snapshot in querySnapshot!!.documents) {\r\n                        var item = snapshot.toObject(Friend::class.java)\r\n                        friend.add(item!!)\r\n                    }\r\n                    searchcount = friend.size\r\n                    getCount()\r\n                    adapter.notifyDataSetChanged()\r\n                }\r\n        }\r\n\r\n        // xml파일을 inflate하여 ViewHolder를 생성\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            var view =\r\n                LayoutInflater.from(parent.context)\r\n                    .inflate(R.layout.item_friend, parent, false)\r\n            return ViewHolder(view)\r\n        }\r\n\r\n        // onCreateViewHolder에서 만든 view와 실제 데이터를 연결\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            var viewHolder = (holder as ViewHolder).itemView\r\n            holder.setFriendName(friend[position])\r\n            holder.setProfileName(friend[position])\r\n            holder.SetFriendColor(friend[position])\r\n            holder.SetFriendEmail(friend[position])\r\n\r\n\r\n        }\r\n\r\n        inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\r\n\r\n            private val FriendName: TextView = itemView.findViewById(R.id.FriendName)\r\n            private val FriendProfileName: TextView = itemView.findViewById(R.id.FriendProfileName)\r\n            private val FriendEmail: TextView = itemView.findViewById(R.id.FriendEmail)\r\n            private val FriendColor: ImageView = itemView.findViewById(R.id.FriendColor)\r\n\r\n\r\n            //친구 이름\r\n            fun setFriendName(item: Friend){\r\n                FriendName.text = item.userName\r\n            }\r\n\r\n            //친구 프로필 이름\r\n            fun setProfileName(item: Friend){\r\n                FriendProfileName.text = item.userName?.get(0).toString()\r\n            }\r\n\r\n            //친구 프로필\r\n            fun SetFriendColor(item:Friend){\r\n                var circleResource = 0\r\n                when (item.userColor) {\r\n                    \"#f69b94\" -> circleResource = R.drawable.b_f69b94\r\n                    \"#f8c8c4\" -> circleResource = R.drawable.b_f8c8c4\r\n                    \"#fcdcce\" -> circleResource = R.drawable.b_fcdcce\r\n                    \"#96b0e5\" -> circleResource = R.drawable.b_96b0e5\r\n                    \"#92b9e2\" -> circleResource = R.drawable.b_92b9e2\r\n                    \"#ebc0c7\" -> circleResource = R.drawable.b_ebc0c7\r\n                    \"#7bb6c8\" -> circleResource = R.drawable.b_7bb6c8\r\n                    \"#aad3d7\" -> circleResource = R.drawable.b_aad3d7\r\n                    \"#f5f1f0\" -> circleResource = R.drawable.b_f5f1f0\r\n                    \"#d5e3e6\" -> circleResource = R.drawable.b_d5e3e6\r\n                    \"#f2a4b1\" -> circleResource = R.drawable.b_f2a4b1\r\n                    \"#7175a5\" -> circleResource = R.drawable.b_7175a5\r\n                    \"#a1b3d7\" -> circleResource = R.drawable.b_a1b3d7\r\n                    \"#bd83cf\" -> circleResource = R.drawable.b_bd83cf\r\n                    \"#e5afe9\" -> circleResource = R.drawable.b_e5afe9\r\n\r\n                }\r\n                FriendColor.setImageResource(circleResource)\r\n            }\r\n\r\n            //친구 이메일\r\n            fun SetFriendEmail(item:Friend){\r\n                FriendEmail.text = item.email\r\n            }\r\n        }\r\n\r\n        // 리사이클러뷰의 아이템 총 개수 반환\r\n        override fun getItemCount() = friend.size\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/goaltracker/FriendActivity.kt b/app/src/main/java/com/example/goaltracker/FriendActivity.kt
--- a/app/src/main/java/com/example/goaltracker/FriendActivity.kt	(revision dca195999894630f54b9d53ddd69e38adaa6f157)
+++ b/app/src/main/java/com/example/goaltracker/FriendActivity.kt	(date 1671835877720)
@@ -1,14 +1,19 @@
 package com.example.goaltracker
 
+import android.content.Context
 import android.content.Intent
+import android.graphics.Color
+import android.graphics.drawable.ColorDrawable
 import android.os.Bundle
 import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.view.Window
 import android.widget.Button
 import android.widget.ImageView
 import android.widget.TextView
+import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
@@ -24,6 +29,7 @@
     var firestore: FirebaseFirestore? = null
     private val currentUser = Firebase.auth.currentUser?.uid
 
+    private lateinit var dialog: DeleteDialog  //다이얼로그
     var searchcount = 0 //사람 수
     private lateinit var adapter: FriendAdapter
     private lateinit var accept_adapter: FriendAcceptAdapter
@@ -358,7 +364,12 @@
             holder.SetFriendColor(friend[position])
             holder.SetFriendEmail(friend[position])
 
+            var account = friend[position]
 
+            //아이템을 클릭하면 다이얼로그 생성
+            holder.itemView.setOnClickListener {
+                delDialog(it.context, account)
+            }
         }
 
         inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
@@ -412,6 +423,46 @@
         // 리사이클러뷰의 아이템 총 개수 반환
         override fun getItemCount() = friend.size
 
+    }
+
+
+    fun delDialog(context: Context, item: Friend) {
+
+        dialog = DeleteDialog(
+            context = context,
+            userName = item.userName,
+            uid = item.uid,
+            email = item.email!!,
+            deletebtnListener = deletebtnListener
+        )
+
+        //다이얼로그 타이틀 및 테두리 없애기
+        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)
+        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
+        dialog.show()
+    }
+
+    //삭제 버튼 클릭 시
+    private val deletebtnListener = View.OnClickListener {
+        firestore?.collection("Account")
+            ?.document("$currentUser")
+            ?.collection("Friend")
+            ?.document("${dialog.uid}")
+            ?.delete()
+            ?.addOnSuccessListener {
+                Toast.makeText(this@FriendActivity, "친구를 삭제했습니다.", Toast.LENGTH_SHORT).show()
+            }
+            ?.addOnFailureListener { }
+
+        firestore?.collection("Account")
+            ?.document(dialog.uid.toString())
+            ?.collection("Friend")
+            ?.document("${currentUser}")
+            ?.delete()
+            ?.addOnSuccessListener { }
+            ?.addOnFailureListener { }
+
+
     }
 }
 
